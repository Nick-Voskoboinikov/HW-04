<?php

use Monolog\Logger;
use Monolog\Handler\StreamHandler;
use Monolog\Formatter\HtmlFormatter;

$objAuthLog = new Logger('authlogger');
$objAuthLog->pushHandler(new StreamHandler(dirname(__DIR__, 2).DIRECTORY_SEPARATOR.'extras'.DIRECTORY_SEPARATOR.'authlog.txt', Logger::INFO));

if(isset($_SESSION["isauth"])){header('Location: /');}
$strUsername = $strUsernameErr = $strPassword = $strPasswordErr ='';

// if(isset($_SESSION['id'])){
// }

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    if(isset($_POST['token'])){
        
        if($_POST['token'] == $_SESSION['CSRF']) {
            if((isset($_POST['username']))&& (isset($_POST['password']))) {

                if (empty($_POST['username'])) {
                    $strUsernameErr = 'Username is required';
                    $objAuthLog->warning('WARNING: Username is required');
                } else {
                    $strUsername = test_input($_POST['username']);
                }

                if (empty($_POST['password'])) {  // let the user dance on the teeth of a rake
                    $strPasswordErr = 'Your password cannot be empty';
                    $objAuthLog->warning('WARNING: Password cannot be empty');
                }

                if( (!$strUsernameErr) && (!$strPasswordErr) ){

                    $strUsername=htmlspecialchars(strip_tags($_POST['username']), ENT_QUOTES);
                    $userExists = App\data\DB::getUserByLogin($strUsername);
                    
                    if($userExists) {
                        $strPassword=htmlspecialchars(strip_tags($_POST["password"]), ENT_QUOTES);
                        $strPassword=\App\core\Controller::seasonWithSalt($strPassword);
                        if ( $strPassword == $userExists['password'] ) {
                            $_SESSION["isauth"] = true;
                            $_SESSION['username']=$userExists['username'];
                            $_SESSION['email']=$userExists['email'];
                            $_SESSION['created']=$userExists['created'];
                            $_SESSION['role']=$userExists['role'];

                            if( isset($_POST['rememberme']) ){
                                $strHash=\App\core\Controller::seasonWithSalt($_POST['token']);
                                $strSuccesResult = App\data\DB::updateHash($userExists['id'],$strHash);
                                setcookie("hash", $strHash, time()+60*60*24*30*6, "/", null, null, true); // http , ~half a year
                            }
                            if($_SESSION['role'] == 5){
                                header('Location: /admin/');
                            } else {
                                echo '<script>swal("üéâ Huraah! üéâ", "You\'ve been logged in successfully.", "success").then(() => {location.href=\'/\';});</script>';
                            }
                        } else {
                            $strPasswordErr = "Double-check your password. ";
                            $objAuthLog->warning('WARNING: Smth wrong with a password');
                        }
                        $strPassword=''; // We don't want client to see what'sretrieved from DB & postprocessed after unsuccessfull attempt
                    }
                    } else { // if( ($strUsernameErr) || ($strPasswordErr) )
                        $strPasswordErr = "Your log in attempt failed.";
                        $objAuthLog->warning('WARNING: Username or pasword error at log in attempt');
                    }

            } // (isset($_POST["login"])) && (isset($_POST["pass"]))
        } else {
            $objAuthLog->warning('WARNING: Cross-site request forgery detected');
        }
    } else {// (isset($_POST['token']))
        $objAuthLog->warning('WARNING: Cross-site request forgery detected');
    }// (isset($_POST['token']))
} else {
    // $_SERVER["REQUEST_METHOD"] != "POST"

    if(isset($_COOKIE['hash'])){
        $strUsername = App\data\DB::getUserByHash(htmlspecialchars(strip_tags($_COOKIE['hash']), ENT_QUOTES));
        if(count($strUsername)!=0){
            $strUsername = $strUsername['username'];
        } else {
            $strUsername = '';
        }
    }
    $strToken = \App\core\Controller::seasonWithSalt(random_int(0,999999));
    $_SESSION['CSRF'] = $strToken;


    // vk auth
$clientId     = '1111111'; // ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
$clientSecret = 'Ksguu4CNsKgbJrFJhehe'; // –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –∫–ª—é—á
$redirectUri  = ((!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off')?"https://":"http://".$_SERVER['HTTP_HOST']).$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI']; // –ê–¥—Ä–µ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 
$params = array(
	'client_id'     => $clientId,
	'redirect_uri'  => $redirectUri,
	'response_type' => 'code',
	'v'             => '5.131',
	'scope'         => 'email',
);
}
if($_SERVER['REQUEST_METHOD'] == 'GET'){
    if(isset($_GET['code'])){
   // if(strstr($_SERVER['QUERY_STRING'], 'code=')){     // might be dependent on MVC design

        $params = array(
            'client_id'     => $clientId,
            'client_secret' => $clientSecret,
            'code'          => $_GET['code'],
            // 'code'          => explode('code=',$_SERVER['QUERY_STRING'])[1],     // approach might be dependent on MVC design
            'redirect_uri'  => $redirectUri
        );
     
        if (!$content = @file_get_contents('https://oauth.vk.com/access_token?' . http_build_query($params))) {
            $error = error_get_last();
            throw new Exception('HTTP request failed. Error: ' . $error['message']);
            $objAuthLog->warning('WARNING: HTTP request failed. Error: ' . $error['message']);
        }
     
        $response = json_decode($content);
     
        // –ï—Å–ª–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        if (isset($response->error)) {
            throw new Exception('–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. Error: ' . $response->error . '. Error description: ' . $response->error_description);
            $objAuthLog->warning('WARNING: –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. Error: ' . $response->error . '. Error description: ' . $response->error_description);
        }
     //–ê –≤–æ—Ç –∑–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ
        $token = $response->access_token; // –¢–æ–∫–µ–Ω
        $expiresIn = $response->expires_in; // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
        $userId = $response->user_id; // ID –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $strUserEmail = $response->email; // authenticated user email address
     
        $strVkUserExists = App\data\DB::getUserByEmail($strUsername);
                    
        if($strVkUserExists) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–µ—Å—Å–∏–∏
        $_SESSION['vktoken'] = $token;
        $_SESSION["isauth"] = true;
        $_SESSION['username']=$strVkUserExists['username'];
        $_SESSION['email']=$strVkUserExists['email'];
        $_SESSION['created']=$strVkUserExists['created'];
        $_SESSION['role']=$strVkUserExists['role'];

echo '<script>swal("üéâ Huraah! üéâ", "You\'ve been logged in as a VK user successfully.", "success").then(() => {location.href=\'/admin/vkcontent\';});</script>';

            } else { // if(! $strVkUserExists)
                $strPasswordErr = 'VK auth failed!';
                $objAuthLog->warning('WARNING: No vk user with such email address has been registered!'); // frankfull error message
            }
        }

    }

function test_input($data) {
    $data = trim($data);
    $data = stripslashes($data);
    $data = htmlspecialchars($data);
    return $data;
  }

?>
<form  method="post" action="<?php echo str_replace('/index.php','', htmlspecialchars($_SERVER["PHP_SELF"]) );?>" autocomplete="off" >
    <h1 class="title">Log into your account</h1>
        <fieldset><legend>Log into your account here</legend>

        <div class="input-group">
            <input type="text" name="username" id="username" required placeholder=" " value="<?=$strUsername;?>">
            <label for="username">Login *</label>
        <span class="error"><?php echo $strUsernameErr;?></span>
        </div>

    <div class="input-group">
        <input type="password" name="password" id="password" placeholder=" " value="<?=$strPassword;?>" required >
        <label for="password">Password *</label>
        <span class="error"><?=$strPasswordErr;?></span>
    </div>

    <? if(isset($strToken)){ echo '<input type="hidden" name="token" value="'.$strToken.'" >'; } ?>

    <div>
        <label for="rememberme">Remember me?&nbsp;<input type="checkbox" name="rememberme" id="rememberme" <?=(isset($_COOKIE['hash']))?'checked':'' ?>></label>
    </div>
    

    <br><input type="submit" value="Log in">
    <br><input type="button" value="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ VK" onclick="location.href='http://oauth.vk.com/authorize?<?=http_build_query( $params ); ?>';" >
</fieldset>
</form>
        <div class="link">
            No account yet? <a href="/admin/add">Sign up</a>
        </div>

